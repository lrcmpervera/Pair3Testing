import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Scanner;

/**
 *
 * @author Grazielle
 */
public class MotorPH {

    public static void main(String[] args) throws Exception{ // we need this "throws" for the .parse(TimeInInput) and .parse.(TimeOutInput).
       
       
       Scanner TimeInBox = new Scanner(System.in); // created a new scanner object "TimeInBox" for the "Time-In Input".
       boolean valid1 = false; // I need this for the if-else scenario (which i need to make a loop to ensure user inputs the correct info needed).
       String TimeInInput = "for format checking only"; // doesn't really have a value and will be rewritten later (i just need this to act as catalyst).
       
       while (!valid1) { // here is the start of the loop.
           System.out.println("Enter Time-In Below:"); // just the question/label.
           TimeInInput = TimeInBox.nextLine(); // this will read the user input. for this one, i connected the scanner object to this string (no need to write "String" again as it was already defined previously.
           
           if (TimeInInput.matches("([01]?[0-9]|2[0-3]):[0-5][0-9]")) {valid1 = true;} 
           else {System.out.println("Invalid Input, please follow HH:MM format");}
           // this one is a bit tricky, i used the ".matches" which is a regex function and the "([01]?[0-9]|2[0-3]):[0-5][0-9]" is the regex format of a 24 hour time HH:MM only. 
           // Basically I just want to make sure that the user will only input a time in this format --> HH:MM, otherwise, a prompt will happen and the loop will start again until correct input is made.
       }   
       
       Scanner TimeOutBox = new Scanner(System.in); // this is a repeat of the above, but this one is for the "Time-Out Input".
       boolean valid2 = false;
       String TimeOutInput = "for format checking only";
       
       while (!valid2) {
           System.out.println("Enter Time-Out Below:");
           TimeOutInput = TimeOutBox.nextLine();
           
           if (TimeOutInput.matches("([01]?[0-9]|2[0-3]):[0-5][0-9]")) {valid2 = true;}
           else {System.out.println("Invalid Input, please follow HH:MM format");}
       }
       
       
       // For this one unfortunately, the ".matches" function doesn't work because doubles cannot be referenced. this one is the hole of the code ugh. if wrong input is made (e.g. letters) there will be an error.
       Scanner HourlyRate = new Scanner(System.in); 
       System.out.println("Enter Hourly Rate Below:");
       double HourlyRateInput = HourlyRate.nextDouble(); // This will read the user input for Hourly Rate.
       
     
       
       SimpleDateFormat TimeFormat = new SimpleDateFormat ("HH:mm"); // I used this package to parse the time period in the format HH:MM. 
       
       Date TimeIn = TimeFormat.parse(TimeInInput); // The input the scanner will read for the "Time-In" will be redirected here.
       Date TimeOut = TimeFormat.parse(TimeOutInput); // The input the scanner will read for the "Time-Out" will be redirected here.
       
       long differenceInMilliSeconds // seconds of hours can be a big number so I just used "long", better safe than sorry.
               = Math.abs(TimeOut.getTime() - TimeIn.getTime()); // Math.abs is to get an "absolute" value so nothing goes wrong and .getTime() just calculates the milliseconds of a time since January 1, 1970, 00:00;00 GTM.
               // Basically we just converted the time-in and time-out to milliseconds then subtracted them.
       
       long differenceInHours
               = (differenceInMilliSeconds / (60 * 60 * 1000)) % 24; // the difference of the time-in and time-out is just re-calculated but now in hours
      
       long differenceInMinutes
               = (differenceInMilliSeconds / (60 * 1000)) % 60; // this just computes the time difference in minutes.
       
       double HourlyRateSalary = differenceInHours * HourlyRateInput; // computation for hourly rate.
       
       double HourlyRateSalaryWithMinutes = HourlyRateSalary + (HourlyRateInput / 60); // this one is a re-calculation of hourly rate but the excess minutes are included.
       
       String createnewline = System.getProperty("line.separator"); // just needed this so the Outputs will be in separate lines.
       
       System.out.println("Total Hours Worked with Minutes: " + differenceInHours + " hours " + differenceInMinutes + " minutes" + createnewline + "Salary Based on Hours Worked with Minutes: " + HourlyRateSalaryWithMinutes + " Pesos"); // The end result will be shown here.
        
        
    }
}
